/* TwitterClient Application

 * Uses Twitter4j library (java)
 * Uses Twitter API 1.1
 * 
 * Can post, retweet, like a tweet and respond to a tweet when messageID is given
 * inspired from Elisha - Simple Developer
 */
package tweeter;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Arrays;

import parser.main.MainController;
import twitter4j.*;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;

class Tweeter {	
	
	private String key_1 = null;
	private String key_2 = null;
	private String key_3 = null;
	private String key_4 = null;
	private String text = null;
	private String type = null;	
	private Integer row_id = null;
	private Long ref_tweet_id = null;

	
	public Tweeter(String key_1, String key_2, String key_3, String key_4, String text, String type, Integer row_id, Long ref_tweet_id) {
		this.key_1 = key_1;
		this.key_2 = key_2;
		this.key_3 = key_3;
		this.key_4 = key_4;
		this.text = text;
		this.type = type;
		this.row_id = row_id;
		this.ref_tweet_id = ref_tweet_id;
			
	}
	
	public Long tweet() {
//		long test_id = 98764321L; // wird später von posting / responding zurück gegebenen!!!
		Long id = 1L;
		System.out.println("werte: " + key_1 +" "+ key_2 +" "+ key_3 +" "+ key_4 +" text: "+ text);

		if(type.equals("tweet")){
			System.out.println("posting");
						id++;
//			try {
//
//				id = posting(key_1, key_2, key_3, key_4, text);
//				System.out.println(id+" id");
//			} catch (TwitterException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
			
		}else if(type.equals("response")){
			id++;
			System.out.println("responding braucht schon die ref ID "+ ref_tweet_id); //ref_tweet_id needed!
//			try {
//				id = replyingToTweet(ref_tweet_id, key_1, key_2, key_3, key_4, text);
//			} catch (TwitterException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
		}
		return id;
	}

	private static void retweeting(long messageId, String consumerKey, String consumerSecret, String accessToken,
			String accessTokenSecret) throws TwitterException {
		// you cannot retweet your own tweet!
		TwitterFactory factory = new TwitterFactory();
		Twitter twitter4 = factory.getInstance();
		twitter4.setOAuthConsumer(consumerKey, consumerSecret);
		AccessToken accessToken4 = new AccessToken(accessToken, accessTokenSecret);
		twitter4.setOAuthAccessToken(accessToken4);
		twitter4.retweetStatus(messageId);

	}

	private static void likingATweet(long messageId, String consumerKey, String consumerSecret, String accessToken,
			String accessTokenSecret) throws TwitterException {
		// TODO Auto-generated method stub

		TwitterFactory factory3 = new TwitterFactory();
		Twitter twitter3 = factory3.getInstance();
		twitter3.setOAuthConsumer(consumerKey, consumerSecret);
		// Parameter von oben
		AccessToken accessToken3 = new AccessToken(accessToken, accessTokenSecret);

		twitter3.setOAuthAccessToken(accessToken3);
		Status status3 = twitter3.createFavorite(messageId);

		logTwitterServerRespond(status3);
	}

	private static long replyingToTweet(long messageId, String consumerKey, String consumerSecret, String accessToken,
			String accessTokenSecret, String text) throws TwitterException {
		// ist statisch gebunden an die TweetID
		System.out.println("replyingToTweet");

		// for replying to the snow tweet with id=677937491094171651
		String replyMessage = text;

		// long messageId =677937491094171651L; // messageId of the tweet to
		// which the user is replying
		TwitterFactory factory2 = new TwitterFactory();
		Twitter twitter2 = factory2.getInstance();
		twitter2.setOAuthConsumer(consumerKey, consumerSecret);
		AccessToken accessToken2 = new AccessToken(accessToken, accessTokenSecret);
		twitter2.setOAuthAccessToken(accessToken2);
		StatusUpdate statusUpdate2 = new StatusUpdate(replyMessage);
		statusUpdate2.setInReplyToStatusId(messageId);
		Status status2 = twitter2.updateStatus(statusUpdate2);

		logTwitterServerRespond(status2);
		Long twitterID = status2.getId();
		return twitterID;

	};

	private static long posting(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret, String text)
			throws TwitterException {
		System.out.println("posting a new tweet");
		// Instantiate a re-usable and thread-safe factory
		TwitterFactory twitterFactory = new TwitterFactory();
		// Instantiate a new Twitter instance
		Twitter twitter = twitterFactory.getInstance();
		// setup OAuth Consumer Credentials
		twitter.setOAuthConsumer(consumerKey, consumerSecret);
		// setup OAuth Access Token
		twitter.setOAuthAccessToken(new AccessToken(accessToken, accessTokenSecret));

		// Instantiate and initialize a new twitter status update
		StatusUpdate statusUpdate = new StatusUpdate(text);

		// attach any media, if you want to
		// statusUpdate.setMedia(
		// //title of media
		// "http://simpledeveloper.com"
		// , new
		// URL("https://si0.twimg.com/profile_images/1733613899/Published_Copy_Book.jpg").openStream());

		Status status = twitter.updateStatus(statusUpdate);

		logTwitterServerRespond(status);
		
		Long twitterID = status.getId();
		return twitterID;
		
		
		
	};
	
	


	public static void logTwitterServerRespond(Status status) {
		// response from twitter server
		System.out.println("status.toString() = " + status.toString());

		System.out.println("status.getInReplyToScreenName() = " + status.getInReplyToScreenName());
		System.out.println("status.getSource() = " + status.getSource());
		System.out.println("status.getText() = " + status.getText());

		System.out.println("status.getURLEntities() = " + Arrays.toString(status.getURLEntities()));
		System.out.println("status.getUserMentionEntities() = " + Arrays.toString(status.getUserMentionEntities()));
		
		
	};

}